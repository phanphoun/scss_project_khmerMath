@use '../abstracts/variables' as *;
@use '../abstracts/mixins' as *;

// ==============================================================
//  COMPREHENSIVE GRID SYSTEM
//  Bootstrap-like responsive grid with flexbox
// ==============================================================

// CONTAINERS
// ==============================================================

// Container centering and padding
.container,
.container-fluid,
.container-sm,
.container-md,
.container-lg,
.container-xl,
.container-xxl {
  width: 100%;
  margin-right: auto;
  margin-left: auto;
  padding-right: var(--gutter, 0.75rem);
  padding-left: var(--gutter, 0.75rem);
}

// Responsive containers
@each $breakpoint, $container-max-width in $container-max-widths {
  .container-#{$breakpoint} {
    @extend .container;
  }

  @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
    .container,
    .container-sm {
      @if $breakpoint == "sm" {
        max-width: $container-max-width;
      }
    }

    .container-md {
      @if $breakpoint == "md" {
        max-width: $container-max-width;
      }
    }

    .container-lg {
      @if $breakpoint == "lg" {
        max-width: $container-max-width;
      }
    }

    .container-xl {
      @if $breakpoint == "xl" {
        max-width: $container-max-width;
      }
    }

    .container-xxl {
      @if $breakpoint == "xxl" {
        max-width: $container-max-width;
      }
    }
  }
}

// ROWS
// ==============================================================

// Row base styles
.row {
  display: flex;
  flex-wrap: wrap;
  margin-right: calc(var(--gutter, 0.75rem) * -1);
  margin-left: calc(var(--gutter, 0.75rem) * -1);
}

// No gutters
.row-no-gutters {
  margin-right: 0;
  margin-left: 0;

  > .col,
  > [class*="col-"] {
    padding-right: 0;
    padding-left: 0;
  }
}

// COLUMNS
// ==============================================================

// Base column styles
@for $i from 1 through $grid-columns {
  .col-#{$i} {
    flex: 0 0 percentage($i / $grid-columns);
    max-width: percentage($i / $grid-columns);
    padding-right: var(--gutter, 0.75rem);
    padding-left: var(--gutter, 0.75rem);
  }
}

// Auto columns
.col-auto {
  flex: 0 0 auto;
  width: auto;
  max-width: 100%;
  padding-right: var(--gutter, 0.75rem);
  padding-left: var(--gutter, 0.75rem);
}

.col {
  flex: 1 0 0%;
  max-width: 100%;
  padding-right: var(--gutter, 0.75rem);
  padding-left: var(--gutter, 0.75rem);
}

// RESPONSIVE COLUMNS
// ==============================================================

// Generate responsive columns
@each $breakpoint in map-keys($grid-breakpoints) {
  $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

  @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
    // Columns
    @for $i from 1 through $grid-columns {
      .col#{$infix}-#{$i} {
        flex: 0 0 percentage($i / $grid-columns);
        max-width: percentage($i / $grid-columns);
        padding-right: var(--gutter, 0.75rem);
        padding-left: var(--gutter, 0.75rem);
      }
    }

    // Auto columns
    .col#{$infix} {
      flex: 1 0 0%;
      max-width: 100%;
      padding-right: var(--gutter, 0.75rem);
      padding-left: var(--gutter, 0.75rem);
    }

    .col#{$infix}-auto {
      flex: 0 0 auto;
      width: auto;
      max-width: 100%;
      padding-right: var(--gutter, 0.75rem);
      padding-left: var(--gutter, 0.75rem);
    }
  }
}

// COLUMN OFFSETS
// ==============================================================

// Base offsets
@for $i from 0 through ($grid-columns - 1) {
  @if not ($i == 0) {
    .offset-#{$i} {
      margin-left: percentage($i / $grid-columns);
    }
  }
}

// Responsive offsets
@each $breakpoint in map-keys($grid-breakpoints) {
  $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

  @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
    @for $i from 0 through ($grid-columns - 1) {
      @if not ($i == 0) {
        .offset#{$infix}-#{$i} {
          margin-left: percentage($i / $grid-columns);
        }
      }
    }
  }
}

// COLUMN ORDERING
// ==============================================================

// Base ordering
.order-first {
  order: -1;
}

.order-last {
  order: $grid-columns;
}

@for $i from 0 through $grid-columns {
  .order-#{$i} {
    order: $i;
  }
}

// Responsive ordering
@each $breakpoint in map-keys($grid-breakpoints) {
  $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

  @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
    .order#{$infix}-first {
      order: -1;
    }

    .order#{$infix}-last {
      order: $grid-columns;
    }

    @for $i from 0 through $grid-columns {
      .order#{$infix}-#{$i} {
        order: $i;
      }
    }
  }
}

// GUTTER UTILITIES
// ==============================================================

// Responsive gutters
@each $breakpoint in map-keys($grid-breakpoints) {
  $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

  @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
    .g#{$infix}-0,
    .gx#{$infix}-0 {
      --gutter: 0;
    }

    .g#{$infix}-1,
    .gx#{$infix}-1 {
      --gutter: 0.25rem;
    }

    .g#{$infix}-2,
    .gx#{$infix}-2 {
      --gutter: 0.5rem;
    }

    .g#{$infix}-3,
    .gx#{$infix}-3 {
      --gutter: 1rem;
    }

    .g#{$infix}-4,
    .gx#{$infix}-4 {
      --gutter: 1.5rem;
    }

    .g#{$infix}-5,
    .gx#{$infix}-5 {
      --gutter: 3rem;
    }

    // Vertical gutters
    .gy#{$infix}-0 {
      --gutter-y: 0;
    }

    .gy#{$infix}-1 {
      --gutter-y: 0.25rem;
    }

    .gy#{$infix}-2 {
      --gutter-y: 0.5rem;
    }

    .gy#{$infix}-3 {
      --gutter-y: 1rem;
    }

    .gy#{$infix}-4 {
      --gutter-y: 1.5rem;
    }

    .gy#{$infix}-5 {
      --gutter-y: 3rem;
    }
  }
}

// Apply vertical gutters
.row {
  --gutter-y: 0;
}

.row > * {
  padding-top: var(--gutter-y);
}

// ALIGNMENT UTILITIES
// ==============================================================

// Vertical alignment
.align-items-start {
  align-items: flex-start !important;
}

.align-items-end {
  align-items: flex-end !important;
}

.align-items-center {
  align-items: center !important;
}

.align-items-baseline {
  align-items: baseline !important;
}

.align-items-stretch {
  align-items: stretch !important;
}

// Individual column alignment
.align-self-auto {
  align-self: auto !important;
}

.align-self-start {
  align-self: flex-start !important;
}

.align-self-end {
  align-self: flex-end !important;
}

.align-self-center {
  align-self: center !important;
}

.align-self-baseline {
  align-self: baseline !important;
}

.align-self-stretch {
  align-self: stretch !important;
}

// Horizontal alignment
.justify-content-start {
  justify-content: flex-start !important;
}

.justify-content-end {
  justify-content: flex-end !important;
}

.justify-content-center {
  justify-content: center !important;
}

.justify-content-between {
  justify-content: space-between !important;
}

.justify-content-around {
  justify-content: space-around !important;
}

.justify-content-evenly {
  justify-content: space-evenly !important;
}

// RESPONSIVE ALIGNMENT
// ==============================================================

@each $breakpoint in map-keys($grid-breakpoints) {
  $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

  @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
    // Vertical alignment
    .align-items#{$infix}-start {
      align-items: flex-start !important;
    }

    .align-items#{$infix}-end {
      align-items: flex-end !important;
    }

    .align-items#{$infix}-center {
      align-items: center !important;
    }

    .align-items#{$infix}-baseline {
      align-items: baseline !important;
    }

    .align-items#{$infix}-stretch {
      align-items: stretch !important;
    }

    // Individual column alignment
    .align-self#{$infix}-auto {
      align-self: auto !important;
    }

    .align-self#{$infix}-start {
      align-self: flex-start !important;
    }

    .align-self#{$infix}-end {
      align-self: flex-end !important;
    }

    .align-self#{$infix}-center {
      align-self: center !important;
    }

    .align-self#{$infix}-baseline {
      align-self: baseline !important;
    }

    .align-self#{$infix}-stretch {
      align-self: stretch !important;
    }

    // Horizontal alignment
    .justify-content#{$infix}-start {
      justify-content: flex-start !important;
    }

    .justify-content#{$infix}-end {
      justify-content: flex-end !important;
    }

    .justify-content#{$infix}-center {
      justify-content: center !important;
    }

    .justify-content#{$infix}-between {
      justify-content: space-between !important;
    }

    .justify-content#{$infix}-around {
      justify-content: space-around !important;
    }

    .justify-content#{$infix}-evenly {
      justify-content: space-evenly !important;
    }
  }
}

// DISPLAY UTILITIES
// ==============================================================

.d-none {
  display: none !important;
}

.d-inline {
  display: inline !important;
}

.d-inline-block {
  display: inline-block !important;
}

.d-block {
  display: block !important;
}

.d-grid {
  display: grid !important;
}

.d-table {
  display: table !important;
}

.d-table-row {
  display: table-row !important;
}

.d-table-cell {
  display: table-cell !important;
}

.d-flex {
  display: flex !important;
}

.d-inline-flex {
  display: inline-flex !important;
}

// RESPONSIVE DISPLAY
// ==============================================================

@each $breakpoint in map-keys($grid-breakpoints) {
  $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

  @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
    .d#{$infix}-none {
      display: none !important;
    }

    .d#{$infix}-inline {
      display: inline !important;
    }

    .d#{$infix}-inline-block {
      display: inline-block !important;
    }

    .d#{$infix}-block {
      display: block !important;
    }

    .d#{$infix}-grid {
      display: grid !important;
    }

    .d#{$infix}-table {
      display: table !important;
    }

    .d#{$infix}-table-row {
      display: table-row !important;
    }

    .d#{$infix}-table-cell {
      display: table-cell !important;
    }

    .d#{$infix}-flex {
      display: flex !important;
    }

    .d#{$infix}-inline-flex {
      display: inline-flex !important;
    }
  }
}

// FLEX DIRECTION
// ==============================================================

.flex-row {
  flex-direction: row !important;
}

.flex-column {
  flex-direction: column !important;
}

.flex-row-reverse {
  flex-direction: row-reverse !important;
}

.flex-column-reverse {
  flex-direction: column-reverse !important;
}

// RESPONSIVE FLEX DIRECTION
// ==============================================================

@each $breakpoint in map-keys($grid-breakpoints) {
  $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

  @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
    .flex#{$infix}-row {
      flex-direction: row !important;
    }

    .flex#{$infix}-column {
      flex-direction: column !important;
    }

    .flex#{$infix}-row-reverse {
      flex-direction: row-reverse !important;
    }

    .flex#{$infix}-column-reverse {
      flex-direction: column-reverse !important;
    }
  }
}

// FLEX WRAP
// ==============================================================

.flex-nowrap {
  flex-wrap: nowrap !important;
}

.flex-wrap {
  flex-wrap: wrap !important;
}

.flex-wrap-reverse {
  flex-wrap: wrap-reverse !important;
}

// RESPONSIVE FLEX WRAP
// ==============================================================

@each $breakpoint in map-keys($grid-breakpoints) {
  $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

  @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
    .flex#{$infix}-nowrap {
      flex-wrap: nowrap !important;
    }

    .flex#{$infix}-wrap {
      flex-wrap: wrap !important;
    }

    .flex#{$infix}-wrap-reverse {
      flex-wrap: wrap-reverse !important;
    }
  }
}

// FLEX GROW AND SHRINK
// ==============================================================

.flex-grow-0 {
  flex-grow: 0 !important;
}

.flex-grow-1 {
  flex-grow: 1 !important;
}

.flex-shrink-0 {
  flex-shrink: 0 !important;
}

.flex-shrink-1 {
  flex-shrink: 1 !important;
}

// RESPONSIVE FLEX GROW AND SHRINK
// ==============================================================

@each $breakpoint in map-keys($grid-breakpoints) {
  $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

  @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
    .flex#{$infix}-grow-0 {
      flex-grow: 0 !important;
    }

    .flex#{$infix}-grow-1 {
      flex-grow: 1 !important;
    }

    .flex#{$infix}-shrink-0 {
      flex-shrink: 0 !important;
    }

    .flex#{$infix}-shrink-1 {
      flex-shrink: 1 !important;
    }
  }
}

// FLEX FILL
// ==============================================================

.flex-fill {
  flex: 1 1 auto !important;
}

// RESPONSIVE FLEX FILL
// ==============================================================

@each $breakpoint in map-keys($grid-breakpoints) {
  $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

  @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
    .flex#{$infix}-fill {
      flex: 1 1 auto !important;
    }
  }
}

// MARGIN AND PADDING AUTO
// ==============================================================

.mx-auto {
  margin-right: auto !important;
  margin-left: auto !important;
}

.my-auto {
  margin-top: auto !important;
  margin-bottom: auto !important;
}

.mt-auto {
  margin-top: auto !important;
}

.mr-auto {
  margin-right: auto !important;
}

.mb-auto {
  margin-bottom: auto !important;
}

.ml-auto {
  margin-left: auto !important;
}

// RESPONSIVE MARGIN AND PADDING AUTO
// ==============================================================

@each $breakpoint in map-keys($grid-breakpoints) {
  $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

  @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
    .m#{$infix}-auto {
      margin: auto !important;
    }

    .mt#{$infix}-auto {
      margin-top: auto !important;
    }

    .mr#{$infix}-auto {
      margin-right: auto !important;
    }

    .mb#{$infix}-auto {
      margin-bottom: auto !important;
    }

    .ml#{$infix}-auto {
      margin-left: auto !important;
    }

    .mx#{$infix}-auto {
      margin-right: auto !important;
      margin-left: auto !important;
    }

    .my#{$infix}-auto {
      margin-top: auto !important;
      margin-bottom: auto !important;
    }
  }
}

